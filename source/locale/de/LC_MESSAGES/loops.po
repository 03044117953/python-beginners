# 
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-20 19:22\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/loops.rst:2
msgid "Loops"
msgstr ""

#: ../../../source/loops.rst:5
msgid "Introduction"
msgstr ""

#: ../../../source/loops.rst:7
msgid ""
"One more thing: Our programs often feature repetition. There is a powerful "
"concept in Python called looping (jargon: *iteration*), which we will "
"elaborate later on. For now, try this easy example::"
msgstr ""

#: ../../../source/loops.rst:14
msgid ""
"This is incredibly helpful if we want to do something multiple times --- "
"say, drawing the individual border lines of a shape --- but only want to "
"write it once.  But it gets better::"
msgstr ""

#: ../../../source/loops.rst:21
msgid ""
"Notice how we write only one line of code using ``i`` but it has 10 "
"different values?"
msgstr ""

#: ../../../source/loops.rst:24
msgid "You can also loop over elements of your choice::"
msgstr ""

#: ../../../source/loops.rst:29
msgid ""
"The ``range(n)`` function can be considered a shorthand for ``0, 1, 2, ..., "
"n-1``. If you want to know more about it, you can use the help in the Python"
" shell by typing ``help(range)``. Use the :kbd:`q` key to exit the help "
"again."
msgstr ""

#: ../../../source/loops.rst:33
msgid ""
"If you want to repeat some code a number of times, but don't care about the "
"value of the ``i`` variable, it can be good practice to replace it with "
"``_`` instead. This signifies that we don't care about its value, or don't "
"wish to use it. So you could rewrite the first example as::"
msgstr ""

#: ../../../source/loops.rst:42
msgid "Drawing a dashed line"
msgstr ""

#: ../../../source/loops.rst:45 ../../../source/loops.rst:86
msgid "Exercise"
msgstr ""

#: ../../../source/loops.rst:47
msgid ""
"Draw a dashed line.  You can move the turtle without the turtle drawing its "
"movement by using the ``turtle.penup()`` function; to tell it to draw again,"
" use ``turtle.pendown()``."
msgstr ""

#: ../../../source/loops.rst:54 ../../../source/loops.rst:92
msgid "Solution"
msgstr ""

#: ../../../source/loops.rst:65 ../../../source/loops.rst:107
msgid "Bonus"
msgstr ""

#: ../../../source/loops.rst:67
msgid "Can you make the dashes become larger as the line progresses?"
msgstr ""

#: ../../../source/loops.rst:73
msgid "Feeling lost?  Inspect ``i`` at every run of the loop::"
msgstr ""

#: ../../../source/loops.rst:79
msgid ""
"Can you utilize ``i`` --- commonly called the **index** variable or loop "
"variable --- to get increasing step sizes?"
msgstr ""

#: ../../../source/loops.rst:83
msgid "Honeycomb loops"
msgstr ""

#: ../../../source/loops.rst:88
msgid ""
"Take your honeycomb program and make it easier with loops. How small can you"
" get it?"
msgstr ""

#: ../../../source/loops.rst:109
msgid ""
"See if you can look at your earlier square-drawing code, and make it much "
"shorter by using loops."
msgstr ""
