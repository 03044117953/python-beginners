# 
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-20 19:22\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/functions.rst:2
msgid "User-defined functions"
msgstr ""

#: ../../../source/functions.rst:5
msgid "Introduction"
msgstr ""

#: ../../../source/functions.rst:7
msgid ""
"There is still a lot of duplicated code --- the actual drawing of the "
"rectangle --- around. If you need to copy and paste code, that is usually a "
"sign of lacking abstractions. (Programmers call it a *code smell.*)"
msgstr ""

#: ../../../source/functions.rst:11
msgid ""
"Functions are one way to express abstractions in Python. Let's take "
"``turtle.reset()`` for example. It is actually an abstraction for a number "
"of steps, namely:"
msgstr ""

#: ../../../source/functions.rst:15
msgid "Erase the drawing board."
msgstr ""

#: ../../../source/functions.rst:16
msgid "Set the width and color back to default."
msgstr ""

#: ../../../source/functions.rst:17
msgid "Move the turtle back to its initial position."
msgstr ""

#: ../../../source/functions.rst:19
msgid "A function can be defined with the ``def`` keyword in Python::"
msgstr ""

#: ../../../source/functions.rst:25
msgid ""
"This function we defined is called ``line_without_moving`` and it is an "
"abstraction for two turtle steps - a move forward and a move backward."
msgstr ""

#: ../../../source/functions.rst:29
msgid ""
"To use it (or as it is usually called, \"to call it\"), write its name "
"followed by parentheses::"
msgstr ""

#: ../../../source/functions.rst:40
msgid "We could write more functions to remove some of the repetition::"
msgstr ""

#: ../../../source/functions.rst:55
msgid ""
"Python uses *indenting with whitespace* to identify blocks of code that "
"belong together. In Python a block (like the function definitions shown "
"above) is introduced with a colon at the end of the line and subsequent "
"commands are indented --- usually 4 spaces further in. The block ends with "
"the first line that isn't indented."
msgstr ""

#: ../../../source/functions.rst:61
msgid ""
"This is different to many other programming languages, which use special "
"characters (like curly braces ``{}``) to group blocks of code together."
msgstr ""

#: ../../../source/functions.rst:65
msgid ""
"Never use tab characters to indent your blocks, only spaces. You can -- and "
"should -- configure your editor to put 4 spaces when you press the tab key. "
"The problem with using tab characters is that other python programmers use "
"spaces, and if both are used in the same file python will read it wrong (in "
"the best place, it will complain, and in the worst case, weird, hard to "
"debug bugs will happen)."
msgstr ""

#: ../../../source/functions.rst:74
msgid "A function for a square"
msgstr ""

#: ../../../source/functions.rst:77 ../../../source/functions.rst:141
msgid "Exercise"
msgstr ""

#: ../../../source/functions.rst:79
msgid ""
"Write a function that draws a square. Could you use this function to improve"
" the tilted squares program? If you change the program to use a function, is"
" it easier to experiment with?"
msgstr ""

#: ../../../source/functions.rst:84 ../../../source/functions.rst:152
msgid "Solution"
msgstr ""

#: ../../../source/functions.rst:123
msgid "Comments"
msgstr ""

#: ../../../source/functions.rst:125
msgid ""
"In the solution above, the line that starts with a ``#`` is called a "
"comment. In Python, anything that goes on a line after ``#`` is ignored by "
"the computer. Use comments to explain what your program does, without "
"changing the behaviour for the computer."
msgstr ""

#: ../../../source/functions.rst:130
msgid "Comments can also go at the end of a line, like this:"
msgstr ""

#: ../../../source/functions.rst:138
msgid "A function for a hexagon"
msgstr ""

#: ../../../source/functions.rst:143
msgid "Write a function that draws a hexagon."
msgstr ""

#: ../../../source/functions.rst:147
msgid ""
"Now combine that function into a honeycomb. Just make it with a single layer"
" like this:"
msgstr ""

#: ../../../source/functions.rst:194
msgid ""
"You could also put the ``turtle.forward(100); turtle.right(60)`` portion in "
"the function, but you better not call it ``hexagon`` in that case.  That's "
"misleading because it actually draws a hexagon and then advances to a "
"position where another hexagon would make sense in order to draw a "
"honeycomb.  If you ever wanted to reuse your hexagon function outside of "
"honeycombs, that would be confusing."
msgstr ""
